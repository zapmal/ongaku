datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(125)
  username  String   @unique @db.VarChar(125)
  fullName  String   @map("full_name") @db.VarChar(255)
  password  String   @db.VarChar(255)
  avatar    String? // TODO: Default avatar.
  background String?
  birthdate DateTime @db.Date
  role      Role     @default(USER)

  userMetadata UserMetadata?
  userMetrics  UserMetrics?
  manager      Manager?
  interaction  Interaction[]
  userPlaylist UserPlaylist[]

  @@map("user")
}

enum Role {
  ADMIN
  MODERATOR
  MANAGER
  USER
  ARTIST
}

model UserPlaylist {
  id         Int      @id @default(autoincrement())
  name       String?  @default("My Playlist") @db.VarChar(125)
  cover      String?
  background String?
  likes      Float?   @default(0)
  createdAt  DateTime @default(now()) @map("created_at") @db.Date
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Date
  userId     Int      @map("user_id")

  user            User              @relation(fields: [userId], references: [id])
  interaction     Interaction[]
  songsInPlaylist SongsInPlaylist[]

  @@map("user_playlist")
}

model UserMetadata {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now()) @map("created_at") @db.Date
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Date
  active        Boolean  @default(true)
  ipAddress     String   @map("ip_address") @db.VarChar(50)
  verifiedEmail Boolean  @map("verified_email")
  userId        Int      @unique @map("user_id")

  user User? @relation(fields: [userId], references: [id])

  @@map("user_metadata")
}

model UserMetrics {
  id                   Int     @id @default(autoincrement())
  mostListenedArtist   String? @map("most_listened_artist") @db.VarChar(50)
  mostListenedGenre    String? @map("most_listened_genre") @db.VarChar(25)
  totalListeningHours  Float?  @default(0) @map("total_listening_hours")
  averageListeningTime Float?  @default(0) @map("average_listening_time")
  favoriteArtists      Json?   @map("favorite_artists")
  userId               Int     @unique @map("user_id")

  user User @relation(fields: [userId], references: [id])

  @@map("user_metrics")
}

model Artist {
  id            Int      @id @default(autoincrement())
  country       String   @db.VarChar(50)
  genres        String[]
  yearsActive   Int      @map("years_active")
  artisticName  String?  @unique @map("artistic_name") @db.VarChar(125)
  labels        String[]
  avatar        String?
  email         String   @unique @db.VarChar(125)
  password      String   @db.VarChar(255)
  verifiedEmail Boolean  @map("verified_email")
  role          Role     @default(ARTIST)
  // remove unique please
  bandId        Int?     @unique @map("band_id")

  band              Band?              @relation(fields: [bandId], references: [id])
  artistMetrics     ArtistMetrics?
  artistInformation ArtistInformation?
  manager           Manager?
  album             Album[]
  song              Song[]
  interaction       Interaction[]

  @@map("artist")
}

model Band {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  members String[]
  artist  Artist[]

  @@map("band")
}

model Manager {
  id       Int  @id @default(autoincrement())
  userId   Int? @unique @map("user_id")
  artistId Int? @unique @map("artist_id")

  artist            Artist?            @relation(fields: [artistId], references: [id])
  user              User?              @relation(fields: [userId], references: [id])
  artistInformation ArtistInformation?

  @@map("manager")
}

model ArtistInformation {
  id              Int     @id @default(autoincrement())
  biography       String?
  officialWebsite String? @map("official_website") @db.VarChar(50)
  coverImage      String? @map("cover_image")
  biographyImage  String? @map("biography_image")
  artistId        Int     @unique @map("artist_id")
  managerId       Int?    @unique @map("manager_id")

  manager Manager? @relation(fields: [managerId], references: [id])
  artist  Artist?  @relation(fields: [artistId], references: [id])

  @@map("artist_information")
}

model ArtistMetrics {
  id               Int    @id @default(autoincrement())
  monthlyListeners Float? @map("monthly_listeners")
  followers        Float? @default(0)
  artistId         Int    @unique @map("artist_id")

  artist Artist? @relation(fields: [artistId], references: [id])

  @@map("artist_metrics")
}

model Album {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  year        DateTime @db.Date
  releaseType String   @map("release_type") @db.VarChar(50)
  cover       String
  artistId    Int      @map("artist_id")

  artist Artist @relation(fields: [artistId], references: [id])
  song   Song[]

  interaction Interaction[]
  @@map("album")
}

model Song {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar(125)
  length     Float
  lyrics     String?
  isExplicit Boolean @default(false) @map("is_explicit")
  path       String
  albumId    Int     @map("album_id")
  artistId   Int     @map("artist_id")

  album           Album             @relation(fields: [albumId], references: [id])
  artist          Artist[]
  // artist          Artist[]          @relation(fields: [artistId], references: [id])
  songMetadata    SongMetadata?
  songMetrics     SongMetrics?
  interaction     Interaction[]
  songsInPlaylist SongsInPlaylist[]

  @@map("song")
}

model SongMetadata {
  id          Int      @id @default(autoincrement())
  format      String?  @db.VarChar(25)
  bitrate     String?  @db.VarChar(25)
  performedBy String[] @map("performed_by")
  writtenBy   String[] @map("written_by")
  producedBy  String[] @map("produced_by")
  language    String?  @db.VarChar(25)
  uploadedAt  DateTime @default(now()) @map("uploaded_at") @db.Date
  songId      Int      @unique @map("song_id")

  song Song @relation(fields: [songId], references: [id])

  @@map("song_metadata")
}

model SongMetrics {
  id                   Int    @id @default(autoincrement())
  playCount            Float? @default(0) @map("play_count")
  averageListeningTime Float? @default(0) @map("average_listening_time")
  likes                Float? @default(0)
  streams              Float? @default(0)
  songId               Int    @unique @map("song_id")

  song Song @relation(fields: [songId], references: [id])

  @@map("song_metrics")
}

model Interaction {
  id             Int      @id @default(autoincrement())
  value Boolean?  
  // likedSong      Boolean? @map("liked_song")
  // likedAlbum     Boolean? @map("liked_album")
  // likedPlaylist  Boolean? @map("liked_playlist")
  // followedArtist Boolean? @map("followed_artist")
  artistId       Int?     @map("artist_id")
  albumId        Int?     @map("album_id")
  userId         Int?     @map("user_id")
  songId         Int?     @map("song_id")
  userPlaylistId Int?     @map("user_playlist_id")

  album        Album?        @relation(fields: [albumId], references: [id])
  artist       Artist?       @relation(fields: [artistId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  song         Song?         @relation(fields: [songId], references: [id])
  userPlaylist UserPlaylist? @relation(fields: [userPlaylistId], references: [id])

  @@map("interaction")
}

// Many-to-many table
model SongsInPlaylist {
  songId         Int @unique @map("song_id")
  userPlaylistId Int @unique @map("user_playlist_id")

  song         Song         @relation(fields: [songId], references: [id])
  userPlaylist UserPlaylist @relation(fields: [userPlaylistId], references: [id])

  @@id([songId, userPlaylistId])
  @@map("songs_in_playlist")
}
